#!/usr/bin/env bash
# This script was generated by bashly 1.0.7 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
nginx_basics_usage() {
  if [[ -n $long_usage ]]; then
    printf "nginx-basics - Examples of nginx resources\n"
    echo

  else
    printf "nginx-basics - Examples of nginx resources\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  nginx-basics COMMAND\n"
  printf "  nginx-basics [COMMAND] --help | -h\n"
  printf "  nginx-basics --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Restart the current resource example\n" "restart"
  printf "  %s   Run a resource example\n" "run    "
  printf "  %s   Stop running resource example\n" "stop   "
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
nginx_basics_restart_usage() {
  if [[ -n $long_usage ]]; then
    printf "nginx-basics restart - Restart the current resource example\n"
    echo

  else
    printf "nginx-basics restart - Restart the current resource example\n"
    echo

  fi

  printf "Alias: re\n"
  echo

  printf "%s\n" "Usage:"
  printf "  nginx-basics restart\n"
  printf "  nginx-basics restart --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  nginx-basics restart\n"
    printf "  nginx-basics re\n"
    echo

  fi
}

# :command.usage
nginx_basics_run_usage() {
  if [[ -n $long_usage ]]; then
    printf "nginx-basics run - Run a resource example\n"
    echo

  else
    printf "nginx-basics run - Run a resource example\n"
    echo

  fi

  printf "Alias: r\n"
  echo

  printf "%s\n" "Usage:"
  printf "  nginx-basics run NAME\n"
  printf "  nginx-basics run --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "NAME"
    printf "    Resource name\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  nginx-basics run serving-static-content\n"
    printf "  nginx-basics r serving-static-content\n"
    echo

  fi
}

# :command.usage
nginx_basics_stop_usage() {
  if [[ -n $long_usage ]]; then
    printf "nginx-basics stop - Stop running resource example\n"
    echo

  else
    printf "nginx-basics stop - Stop running resource example\n"
    echo

  fi

  printf "Alias: st\n"
  echo

  printf "%s\n" "Usage:"
  printf "  nginx-basics stop\n"
  printf "  nginx-basics stop --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  nginx-basics stop\n"
    printf "  nginx-basics st\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

}

# :command.user_lib
# src/lib/check_if_resource_file_exists.sh
check_if_resource_file_exists() {
  RESOURCE_CONTAINER_FILE=$1

  if [ ! -f "$RESOURCE_CONTAINER_FILE" ]; then
    echo "Error: File '${RESOURCE_CONTAINER_FILE}' not found" >&2
    return 1
  fi

  if [ ! -s "$RESOURCE_CONTAINER_FILE"  ]; then
    echo "Error: Container name not found" >&2
    return 1
  fi
}

# :command.command_functions
# :command.function
nginx_basics_restart_command() {
  # src/restart_command.sh
  RESOURCE_CONTAINER_FILE=".running_resource"

  check_if_resource_file_exists $RESOURCE_CONTAINER_FILE

  container_name=$(<"$RESOURCE_CONTAINER_FILE")

  echo "Restarting container:"

  docker container restart $container_name

  echo
  echo "Done"
  echo "Container restarted"

}

# :command.function
nginx_basics_run_command() {
  # src/run_command.sh
  serving_static_content() {
    EXAMPLE_NAME="Example running 'Serving static content with nginx'"
    INDEX_FILE="site/index.html"
    NGINX_CONF_FILE="nginx.conf"
    RESOURCE_CONTAINER_FILE=".running_resource"
    STATIC_CONTENT_DIR="resources/serving-static-content"

    if [ ! -d "$STATIC_CONTENT_DIR" ]; then
      echo "Error: Directory ${STATIC_CONTENT_DIR} not found" >&2
      return 1
    fi

    if [ ! -f "$STATIC_CONTENT_DIR/$INDEX_FILE" ]; then
      echo "Error: File ${INDEX_FILE} not found" >&2
      return 1
    fi

    if [ ! -f "$STATIC_CONTENT_DIR/$NGINX_CONF_FILE" ]; then
      echo "Error: File ${NGINX_CONF_FILE} not found" >&2
      return 1
    fi

    container_name=serving-static-content-with-nginx

    echo "Container starting..."
    echo "Container ID:"

    docker run --name $container_name \
               -v $(pwd)/$STATIC_CONTENT_DIR/$NGINX_CONF_FILE:/etc/nginx/nginx.conf \
               -v $(pwd)/$STATIC_CONTENT_DIR/site:/usr/share/nginx/html \
               -p 80:80 \
               -d nginx

    echo
    echo "$container_name" > "$RESOURCE_CONTAINER_FILE"

    echo $EXAMPLE_NAME
  }

  resource_name=${args[name]}

  echo "Trying resource: ${resource_name}..."
  echo

  case "$resource_name" in
    "serving-static-content")
      serving_static_content
      ;;
    *)
      echo "Resource not found!"
      echo
      ./nginx-basics -h
      ;;
  esac

}

# :command.function
nginx_basics_stop_command() {
  # src/stop_command.sh
  RESOURCE_CONTAINER_FILE=".running_resource"

  check_if_resource_file_exists $RESOURCE_CONTAINER_FILE

  container_name=$(<"$RESOURCE_CONTAINER_FILE")

  echo "Stopping container:"

  docker container stop $container_name

  echo
  echo "Removing container:"

  docker container rm $container_name

  > "$RESOURCE_CONTAINER_FILE"

  echo
  echo "Finishing resource example"
  echo "See you space cowboy..."

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        nginx_basics_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    restart | re)
      action="restart"
      shift
      nginx_basics_restart_parse_requirements "$@"
      shift $#
      ;;

    run | r)
      action="run"
      shift
      nginx_basics_run_parse_requirements "$@"
      shift $#
      ;;

    stop | st)
      action="stop"
      shift
      nginx_basics_stop_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      nginx_basics_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
nginx_basics_restart_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        nginx_basics_restart_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="restart"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
nginx_basics_run_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        nginx_basics_run_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="run"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['name']+x} ]]; then

          args['name']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['name']+x} ]]; then
    printf "missing required argument: NAME\nusage: nginx-basics run NAME\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
nginx_basics_stop_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        nginx_basics_stop_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="stop"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "restart") nginx_basics_restart_command ;;
    "run") nginx_basics_run_command ;;
    "stop") nginx_basics_stop_command ;;
  esac
}

initialize
run "$@"
